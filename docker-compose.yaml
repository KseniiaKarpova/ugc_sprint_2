version: '3.9'

x-mongo-common:
  &mongo-common
  image: mongo:5.0.21
  networks:
    - application_network
  healthcheck:
    test: echo 'db.runCommand("ping").ok' | mongo $(hostname)/test --quiet
    interval: 10s
    timeout: 5s
    retries: 3
    start_period: 10s

services:
  reviews_api:
    container_name: reviews_api
    restart: unless-stopped
    build:
      context: ./ReviewsAPI
      dockerfile: dockerfile
    networks:
      - application_network
    env_file:
      - .env
    ports:
      - 8000:8000
    volumes:
      - ./ReviewsAPI:/opt/app
      - logs:/opt/logs
    command: poetry run uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      mongos:
        condition: service_healthy

  mongo_cnf_n1:
    <<: *mongo-common
    hostname: mongo_cnf_n1
    container_name: mongo_cnf_n1
    command: mongod --configsvr --replSet mongo_cnf --dbpath /data/db --port 27017 --bind_ip localhost,mongo_cnf_n1
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_cnf_n1_data:/data/db

  mongo_cnf_n2:
    <<: *mongo-common
    hostname: mongo_cnf_n2
    container_name: mongo_cnf_n2
    command: mongod --configsvr --replSet mongo_cnf --dbpath /data/db --port 27017 --bind_ip localhost,mongo_cnf_n2
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_cnf_n2_data:/data/db

  config_cnf_rs:
    <<: *mongo-common
    volumes:
      - ./mongo_configs/rs_cnf_setup.js:/conf/setup.js
    command: [
      "mongosh",
      "--host",
      "mongo_cnf_n1",
      "--port",
      "27017",
      "/conf/setup.js"
    ]
    depends_on:
      mongo_cnf_n1:
        condition: service_healthy
      mongo_cnf_n2:
        condition: service_healthy

  mongo_rs1_n1:
    <<: *mongo-common
    hostname: mongo_rs1_n1
    container_name: mongo_rs1_n1
    command: mongod --shardsvr --replSet mongo_rs1 --dbpath /data/db --port 27017 --bind_ip localhost,mongo_rs1_n1
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_rs1_n1_data:/data/db

  mongo_rs1_n2:
    <<: *mongo-common
    hostname: mongo_rs1_n2
    container_name: mongo_rs1_n2
    command: mongod --shardsvr --replSet mongo_rs1 --dbpath /data/db --port 27017 --bind_ip localhost,mongo_rs1_n2
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_rs1_n2_data:/data/db

  config_rs1:
    <<: *mongo-common
    volumes:
      - ./mongo_configs/rs_1_setup.js:/conf/setup.js
    command: [
      "mongosh",
      "--host",
      "mongo_rs1_n1",
      "--port",
      "27017",
      "/conf/setup.js"
    ]
    depends_on:
      mongo_rs1_n1:
        condition: service_healthy
      mongo_rs1_n2:
        condition: service_healthy

  mongo_rs2_n1:
    <<: *mongo-common
    hostname: mongo_rs2_n1
    container_name: mongo_rs2_n1
    command: mongod --shardsvr --replSet mongo_rs2 --dbpath /data/db --port 27017 --bind_ip localhost,mongo_rs2_n1
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_rs2_n1_data:/data/db

  mongo_rs2_n2:
    <<: *mongo-common
    hostname: mongo_rs2_n2
    container_name: mongo_rs2_n2
    command: mongod --shardsvr --replSet mongo_rs2 --dbpath /data/db --port 27017 --bind_ip localhost,mongo_rs2_n2
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_rs2_n2_data:/data/db

  config_rs2:
    <<: *mongo-common
    volumes:
      - ./mongo_configs/rs_2_setup.js:/conf/setup.js
    command: [
      "mongosh",
      "--host",
      "mongo_rs2_n1",
      "--port",
      "27017",
      "/conf/setup.js"
    ]
    depends_on:
      mongo_rs2_n1:
        condition: service_healthy
      mongo_rs2_n2:
        condition: service_healthy

  mongos:
    <<: *mongo-common
    command: mongos --configdb mongo_cnf/mongo_cnf_n1:27017,mongo_cnf_n2:27017 --port 27017 --bind_ip localhost,mongos
    hostname: mongos
    container_name: mongos
    ports:
      - "27017:27017"
    env_file:
      - .env
    environment:
      - MONGO_INITDB_DATABASE=${MONGODB_DB_NAME}
    depends_on:
      config_rs1:
        condition: service_completed_successfully
      config_rs2:
        condition: service_completed_successfully
    volumes:
      - /etc/localtime:/etc/localtime:ro

  config_shared_cluster:
    <<: *mongo-common
    command: [
      "mongosh",
      "--host",
      "mongos",
      "--port",
      "27017",
      "/conf/setup.js"
    ]
    volumes:
      - ./mongo_configs/sharded_cluster_setup.js:/conf/setup.js
    depends_on:
      mongos:
        condition: service_healthy

  filebeat-reviews-api:
    build:
      context: ./filebeat
      dockerfile: dockerfile
    container_name: reviews_api_filebeat
    volumes:
      - logs:/var/app/log
    depends_on:
      - kibana-logs
      - elasticsearch-logs

  logstash:
    image: logstash:8.10.2
    depends_on:
      - elasticsearch-logs
    environment:
      XPACK_MONITORING_ENABLED: "false"
      ES_HOST: "elasticsearch-logs:9200"
    volumes:
      - ./logstash:/config:ro
    command: logstash -f /config/logstash.conf

  elasticsearch-logs:
    image: elasticsearch:8.10.2
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms265m -Xmx265m"
      - xpack.security.enabled=false
    volumes:
      - es-logs-data:/tmp/elasticsearch/data

  kibana-logs:
    image: kibana:8.10.2
    container_name: kibana-posts
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-logs:9200
      - "ES_JAVA_OPTS=-Xms128m -Xmx128m"
    depends_on:
      - elasticsearch-logs

  auth_postgres:
    image: postgres:15.5-alpine3.19
    container_name: auth_postgres
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${AUTH_POSTGRES_PASSWORD}
      - POSTGRES_USER=${AUTH_POSTGRES_USER}
      - POSTGRES_DB=${AUTH_POSTGRES_DB}
      - POSTGRES_PORT=${AUTH_POSTGRES_PORT}
    volumes:
      - auth_pg_data:/var/lib/postgresql/data
    networks:
      - application_network

  redis:
    image: redis:7.2.3-alpine3.18
    container_name: redis
    restart: always
    env_file:
      - .env
    volumes:
      - redis_data:/data
    networks:
      - application_network

#______________Auth_______________
  auth_api:
    container_name: AuthAPI
    command: poetry run gunicorn main:app --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:9999 --reload
    env_file:
      - .env
    volumes:
      - ./AuthAPI:/opt/app
      - logs:/opt/logs
    build:
      context: AuthAPI
      dockerfile: dockerfile
    depends_on:
      auth_postgres:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - application_network

  nginx:
    image: nginx:1.19.2
    container_name: nginx
    volumes:
      - ./Nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./Nginx/auth_api.conf:/etc/nginx/conf.d/auth_api.conf:ro
      - ./Nginx/reviews_api.conf:/etc/nginx/conf.d/cinema_api.conf:ro
    depends_on:
      auth_api:
        condition: service_started
      reviews_api:
        condition: service_started
    networks:
      - application_network
    ports:
      - "8001:8001"
      - "3000:3000"

networks:
  application_network:

volumes:
  mongo_rs1_n1_data:
  mongo_rs1_n2_data:
  mongo_rs2_n1_data:
  mongo_rs2_n2_data:
  mongo_cnf_n1_data:
  mongo_cnf_n2_data:
  logs:
  es-logs-data:
  auth_pg_data:
  redis_data:
